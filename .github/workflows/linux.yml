name: Linux

on: [push, pull_request]

jobs:
  linux-build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "GCC"
            build_type: "Debug"
            cmake_generator: "Unix Makefiles"
            cmake_args: "-DDILIGENT_BUILD_TESTS=ON"
            cc: gcc-9
            cxx: g++-9

          - name: "GCC"
            build_type: "Release"
            cmake_generator: "Unix Makefiles"
            cmake_args: "-DDILIGENT_BUILD_TESTS=ON"
            cc: gcc-9
            cxx: g++-9

          - name: "Clang"
            build_type: "Debug"
            cmake_generator: "Ninja"
            cmake_args: "-DDILIGENT_BUILD_TESTS=ON"
            cc: clang-12
            cxx: clang++-12

          - name: "Clang"
            build_type: "Release"
            cmake_generator: "Ninja"
            cmake_args: "-DDILIGENT_BUILD_TESTS=ON"
            cc: clang-12
            cxx: clang++-12

          - name: "Clang-NO_GLSLANG"
            build_type: "Debug"
            cmake_generator: "Ninja"
            cmake_args: "-DDILIGENT_BUILD_TESTS=ON -DDILIGENT_BUILD_CORE_INCLUDE_TEST=OFF -DDILIGENT_NO_OPENGL=ON -DDILIGENT_NO_GLSLANG=ON"
            cc: clang-12
            cxx: clang++-12

          - name: "Clang-NO_GLSLANG-NO_HLSL"
            build_type: "Release"
            cmake_generator: "Ninja"
            cmake_args: "-DDILIGENT_BUILD_TESTS=ON -DDILIGENT_BUILD_CORE_INCLUDE_TEST=OFF -DDILIGENT_NO_GLSLANG=ON -DDILIGENT_NO_HLSL=ON"
            cc: clang-12
            cxx: clang++-12

    name: Linux -> ${{ matrix.name }}-x64, ${{ matrix.build_type }}

    steps:
    - name: Clone repository
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Configure dependencies
      if: success()
      run: |
        sudo apt-get update && sudo apt-get install build-essential libx11-dev libgl1-mesa-dev

    - name: Setup Ninja
      if: ${{ success() && matrix.cmake_generator == 'Ninja' }}
      uses: seanmiddleditch/gha-setup-ninja@master

    - name: Configure CMake
      if: success()
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
        CMAKE_GENERATOR: ${{ matrix.cmake_generator }}
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE/BuildTools/Scripts/github_actions
        chmod +x configure_cmake.sh
        ./configure_cmake.sh "linux" "${{runner.workspace}}" ${{ matrix.build_type }} "${{ matrix.cmake_args }}"

    - name: Build
      if: success()
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config ${{ matrix.build_type }} --target install -j2

    - name: DiligentCoreTest
      if: success()
      shell: bash
      run: |
        cd "${{runner.workspace}}/DiligentCore/Tests/DiligentCoreTest/assets"
        ${{runner.workspace}}/build/Tests/DiligentCoreTest/DiligentCoreTest

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      if: ${{ success() && matrix.build_type != 'Debug' }}
      with:
        name: DiligentCore-Linux-${{ matrix.name }}-x64-${{ matrix.build_type }}
        path: |
          ${{runner.workspace}}/build/install/
          !${{runner.workspace}}/build/install/**/*.a
        retention-days: 90
