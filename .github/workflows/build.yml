name: Build

on: [push, pull_request]

jobs:
  #########  Pre-checks  #########
  win-precheks:
    runs-on: windows-latest
    name: Win10 -> Pre-checks

    steps:
    - name: Clone repository
      uses: actions/checkout@v2

    - name: Format validation
      shell: cmd
      run: |
        cd BuildTools\FormatValidation
        validate_format_win.bat

  linux-precheks:
    runs-on: ubuntu-latest
    name: Linux -> Pre-checks

    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Format validation
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE/BuildTools/FormatValidation
          ./validate_format_linux.sh

      - name: Codespell
        uses: codespell-project/actions-codespell@master
        with:
          check_filenames: true
          ignore_words_list: ser,inout,lod,pres,boundimg,ot,unknwn
          skip: ./ThirdParty
          path: .

  macos-precheks:
    runs-on: macos-latest
    name: MacOS -> Pre-Checks

    steps:
    - name: Clone repository
      uses: actions/checkout@v2

    - name: Format validation
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE/BuildTools/FormatValidation
        ./validate_format_mac.sh



  #########  Windows/UWP builds  #########
  win-build:
    needs: win-precheks
    runs-on: windows-2022

    strategy:
      fail-fast: false
      matrix:
        name: ["Win10"]
        toolset: [Win32, x64]
        build_type: [Debug, Release]
        cmake_generator: ["Visual Studio 17 2022"]
        cmake_args: ["-DDILIGENT_BUILD_TESTS=ON"]

        include:
          - name: "Win10-Dev"
            toolset: x64
            build_type: RelWithDebInfo
            cmake_generator: "Visual Studio 17 2022"
            cmake_args: "-DDILIGENT_BUILD_TESTS=ON -DDILIGENT_BUILD_CORE_INCLUDE_TEST=OFF -DDILIGENT_DEVELOPMENT=ON -DDILIGENT_LOAD_PIX_EVENT_RUNTIME=ON"

          - name: "Win8.1"
            toolset: x64
            build_type: Release
            cmake_generator: "Visual Studio 17 2022"
            cmake_args: "-DDILIGENT_BUILD_TESTS=ON -DDILIGENT_BUILD_CORE_INCLUDE_TEST=OFF -DCMAKE_SYSTEM_VERSION=8.1 -DDILIGENT_LOAD_PIX_EVENT_RUNTIME=ON"

          - name: "Win10-Ninja"
            toolset: x64
            build_type: Debug
            cmake_generator: "Ninja"
            cmake_args: "-DDILIGENT_BUILD_TESTS=ON -DDILIGENT_BUILD_CORE_INCLUDE_TEST=OFF"

          - name: "UWP"
            toolset: x64
            build_type: Debug
            cmake_generator: "Visual Studio 17 2022"
            cmake_args: "-DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=10.0 -DDILIGENT_LOAD_PIX_EVENT_RUNTIME=ON"

          - name: "UWP"
            toolset: x64
            build_type: Release
            cmake_generator: "Visual Studio 17 2022"
            cmake_args: "-DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=10.0 -DDILIGENT_LOAD_PIX_EVENT_RUNTIME=ON"

    name: Win10 -> ${{ matrix.name }}-${{ matrix.toolset }}, ${{ matrix.build_type }}

    steps:
    - name: Clone repository
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Setup Ninja
      if: ${{ success() && matrix.cmake_generator == 'Ninja' }}
      uses: seanmiddleditch/gha-setup-ninja@master

    - name: Setup VS Development Environment
      if: ${{ success() && matrix.cmake_generator == 'Ninja' }}
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.toolset }}

    - name: Configure CMake
      if: success()
      env:
        CMAKE_GENERATOR: ${{ matrix.cmake_generator }}
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE/BuildTools/Scripts/github_actions
        ./configure_cmake.sh "win" "${{runner.workspace}}" ${{ matrix.toolset }} ${{ matrix.build_type }} "${{ matrix.cmake_args }}"

    - name: Build
      if: success()
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config ${{ matrix.build_type }} --target install -j2

    - name: DiligentCoreTest
      if: ${{ success() && matrix.name != 'UWP'}}
      shell: bash
      run: |
        cd "${{runner.workspace}}\DiligentCore\Tests\DiligentCoreTest\assets"
        export BIN_DIR="${{runner.workspace}}\build\Tests\DiligentCoreTest"
        if [ "${{ matrix.cmake_generator }}" != "Ninja" ]; then BIN_DIR="$BIN_DIR\${{ matrix.build_type }}"; fi
        "$BIN_DIR\DiligentCoreTest.exe"

    - name: DiligentCoreAPITest D3D11
      if: ${{ success() && (matrix.name == 'Win10' || matrix.name == 'Win8.1') }}
      shell: bash
      run: |
        cd "${{runner.workspace}}\DiligentCore\Tests\DiligentCoreAPITest\assets"
        "${{runner.workspace}}\build\Tests\DiligentCoreAPITest\${{ matrix.build_type }}\DiligentCoreAPITest.exe" --mode=d3d11_sw

    - name: DiligentCoreAPITest D3D12
      if: ${{ success() && matrix.name == 'Win10' }}
      shell: bash
      run: |
        cd "${{runner.workspace}}\DiligentCore\Tests\DiligentCoreAPITest\assets"
        "${{runner.workspace}}\build\Tests\DiligentCoreAPITest\${{ matrix.build_type }}\DiligentCoreAPITest.exe" --mode=d3d12_sw

    - name: DiligentCoreAPITest D3D12 DXC
      if: ${{ success() && matrix.name == 'Win10' }}
      shell: bash
      run: |
        cd "${{runner.workspace}}\DiligentCore\Tests\DiligentCoreAPITest\assets"
        "${{runner.workspace}}\build\Tests\DiligentCoreAPITest\${{ matrix.build_type }}\DiligentCoreAPITest.exe" --mode=d3d12_sw --shader_compiler=dxc

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      if: ${{ success() && matrix.build_type != 'Debug' && matrix.cmake_generator != 'Ninja' }}
      with:
        name: DiligentCore-${{ matrix.name }}-${{ matrix.toolset }}-${{ matrix.build_type }}
        path: |
          ${{runner.workspace}}/build/install/
          !${{runner.workspace}}/build/install/**/*.lib
        retention-days: 90



  #########  Linux builds  #########
  linux-build:
    needs: linux-precheks
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - name: "GCC"
            build_type: "Debug"
            cmake_generator: "Unix Makefiles"
            cmake_args: "-DDILIGENT_BUILD_TESTS=ON"
            cc: gcc-9
            cxx: g++-9

          - name: "GCC"
            build_type: "Release"
            cmake_generator: "Unix Makefiles"
            cmake_args: "-DDILIGENT_BUILD_TESTS=ON"
            cc: gcc-9
            cxx: g++-9

          - name: "Clang"
            build_type: "Debug"
            cmake_generator: "Ninja"
            cmake_args: "-DDILIGENT_BUILD_TESTS=ON"
            cc: clang-12
            cxx: clang++-12

          - name: "Clang"
            build_type: "Release"
            cmake_generator: "Ninja"
            cmake_args: "-DDILIGENT_BUILD_TESTS=ON"
            cc: clang-12
            cxx: clang++-12

          - name: "Clang-NO_GLSLANG"
            build_type: "Debug"
            cmake_generator: "Ninja"
            cmake_args: "-DDILIGENT_BUILD_TESTS=ON -DDILIGENT_BUILD_CORE_INCLUDE_TEST=OFF -DDILIGENT_NO_OPENGL=ON -DDILIGENT_NO_GLSLANG=ON"
            cc: clang-12
            cxx: clang++-12

          - name: "Clang-NO_GLSLANG-NO_HLSL"
            build_type: "Release"
            cmake_generator: "Ninja"
            cmake_args: "-DDILIGENT_BUILD_TESTS=ON -DDILIGENT_BUILD_CORE_INCLUDE_TEST=OFF -DDILIGENT_NO_GLSLANG=ON -DDILIGENT_NO_HLSL=ON"
            cc: clang-12
            cxx: clang++-12

    name: Linux -> ${{ matrix.name }}-x64, ${{ matrix.build_type }}

    steps:
    - name: Clone repository
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Configure dependencies
      if: success()
      run: |
        sudo apt-get update && sudo apt-get install build-essential libx11-dev libgl1-mesa-dev

    - name: Setup Ninja
      if: ${{ success() && matrix.cmake_generator == 'Ninja' }}
      uses: seanmiddleditch/gha-setup-ninja@master

    - name: Configure CMake
      if: success()
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
        CMAKE_GENERATOR: ${{ matrix.cmake_generator }}
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE/BuildTools/Scripts/github_actions
        chmod +x configure_cmake.sh
        ./configure_cmake.sh "linux" "${{runner.workspace}}" ${{ matrix.build_type }} "${{ matrix.cmake_args }}"

    - name: Build
      if: success()
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config ${{ matrix.build_type }} --target install -j2

    - name: DiligentCoreTest
      if: success()
      shell: bash
      run: |
        cd "${{runner.workspace}}/DiligentCore/Tests/DiligentCoreTest/assets"
        ${{runner.workspace}}/build/Tests/DiligentCoreTest/DiligentCoreTest

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      if: ${{ success() && matrix.build_type != 'Debug' }}
      with:
        name: DiligentCore-Linux-${{ matrix.name }}-x64-${{ matrix.build_type }}
        path: |
          ${{runner.workspace}}/build/install/
          !${{runner.workspace}}/build/install/**/*.a
        retention-days: 90



  #########  MacOS/iOS/tvOS builds  #########
  macos-build:
    needs: macos-precheks
    runs-on: macos-latest

    strategy:
      matrix:
        platform: [MacOS, iOS, tvOS]
        build_type: [Debug, Release]
        exclude:
          # Exclude tvOS-Debug
          - platform: tvOS
            build_type: Debug
        include:
          - platform: "MacOS"
            build_type: "Debug"
            cmake_args: "-DDILIGENT_BUILD_TESTS=ON"
          - platform: "MacOS"
            build_type: "Release"
            cmake_args: "-DDILIGENT_BUILD_TESTS=ON -DDILIGENT_BUILD_CORE_INCLUDE_TEST=OFF"
          - platform: "iOS"
            cmake_args: ""
          - platform: "tvOS"
            cmake_args: ""

    name: MacOS -> ${{ matrix.platform }}-${{ matrix.build_type }}

    steps:
    - name: Clone repository
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Download Vulkan SDK
      if: success()
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE/BuildTools/Scripts/github_actions
        chmod +x vulkan_sdk.sh
        ./vulkan_sdk.sh

    - name: Configure CMake
      if: success()
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE/BuildTools/Scripts/github_actions
        chmod +x configure_cmake.sh
        ./configure_cmake.sh "${{ matrix.platform }}" "${{runner.workspace}}" ${{ matrix.build_type }} "${{ matrix.cmake_args }}"

    - name: Build
      if: success()
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config ${{ matrix.build_type }} --target install -j2

    - name: DiligentCoreTest
      if: ${{ success() && matrix.platform == 'MacOS' }}
      shell: bash
      run: |
        cd "${{runner.workspace}}/DiligentCore/Tests/DiligentCoreTest/assets"
        ${{runner.workspace}}/build/Tests/DiligentCoreTest/DiligentCoreTest

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      if: ${{ success() && matrix.build_type == 'Release' }}
      with:
        name: DiligentCore-${{ matrix.platform }}-${{ matrix.build_type }}
        path: |
          ${{runner.workspace}}/build/install/
          !${{runner.workspace}}/build/install/**/*.a
        retention-days: 90



  #########  Android  #########
  android-build:
    needs: linux-precheks
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "ARM32"
            arch: "armeabi-v7a"

          - name: "ARM64"
            arch: "arm64-v8a"

    name: Linux -> Android-${{ matrix.name }}

    steps:
    - name: Clone repository
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Build with Gradle
      env:
        ANDROID_ARCH: ${{ matrix.arch }}
      run: |
        cd ./BuildTools/Android
        chmod +x gradlew
        ./gradlew buildCMakeDebug



  #########  Emscripten  #########
  emscripten-build:
    needs: [win-precheks, linux-precheks]

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        build_type: [Debug, Release]
        exclude:
          # Exclude MacOS-Release
          - os: macos-latest
            build_type: Release
        include:
          - os: windows-latest
            host_name: Win10
          - os: ubuntu-latest
            host_name: Linux
          - os: macos-latest
            host_name: MacOS

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.host_name }} -> Emscripten, ${{ matrix.build_type }}

    steps:
    - name: Clone repository
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Configure Ninja
      uses: seanmiddleditch/gha-setup-ninja@master

    - name: Download and Configure Emscripten SDK
      if: success()
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE/BuildTools/Scripts/github_actions
        if [[ "${{ matrix.host_name }}" != "Win"* ]]; then
          chmod +x emscripten_sdk.sh
        fi
        ./emscripten_sdk.sh "${{runner.workspace}}" 

    - name: Configure CMake
      if: success()
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE/BuildTools/Scripts/github_actions
        if [[ "${{ matrix.host_name }}" != "Win"* ]]; then
          chmod +x configure_cmake.sh
        fi
        ./configure_cmake.sh "emscripten" "${{runner.workspace}}" ${{ matrix.build_type }} "-DDILIGENT_BUILD_CORE_TESTS=ON"

    - name: Build
      if: success()
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build .
